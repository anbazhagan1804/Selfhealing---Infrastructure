apiVersion: v1
kind: Namespace
metadata:
  name: sentinel
  labels:
    name: sentinel
    app: selfhealing-sentinel
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentinel-config
  namespace: sentinel
data:
  settings.yaml: |
    # This is a reference to the actual settings.yaml file
    # The actual configuration should be mounted from a ConfigMap or Secret
    # created from the config/settings.yaml file
  thresholds.yaml: |
    # This is a reference to the actual thresholds.yaml file
    # The actual configuration should be mounted from a ConfigMap or Secret
    # created from the config/thresholds.yaml file
  remediation.yaml: |
    # This is a reference to the actual remediation.yaml file
    # The actual configuration should be mounted from a ConfigMap or Secret
    # created from the config/remediation.yaml file
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sentinel-sa
  namespace: sentinel
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sentinel-role
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["nodes", "pods", "services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["delete"] # For pod restart actions
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["patch", "update"] # For node cordon/uncordon actions
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["patch", "update"] # For deployment scaling actions
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch", "update"] # For creating events
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sentinel-role-binding
subjects:
- kind: ServiceAccount
  name: sentinel-sa
  namespace: sentinel
roleRef:
  kind: ClusterRole
  name: sentinel-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: anomaly-detector
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: anomaly-detector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: selfhealing-sentinel
      component: anomaly-detector
  template:
    metadata:
      labels:
        app: selfhealing-sentinel
        component: anomaly-detector
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sentinel-sa
      containers:
      - name: anomaly-detector
        image: selfhealing-sentinel/anomaly-detector:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: metrics
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "200m"
            memory: "512Mi"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: logs-volume
          mountPath: /app/logs
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: sentinel-config
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: remediation-orchestrator
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: remediation-orchestrator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: selfhealing-sentinel
      component: remediation-orchestrator
  template:
    metadata:
      labels:
        app: selfhealing-sentinel
        component: remediation-orchestrator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sentinel-sa
      containers:
      - name: remediation-orchestrator
        image: selfhealing-sentinel/remediation-orchestrator:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
          name: metrics
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "200m"
            memory: "512Mi"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: logs-volume
          mountPath: /app/logs
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: sentinel-config
      - name: logs-volume
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sentinel-api
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: sentinel-api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: selfhealing-sentinel
      component: sentinel-api
  template:
    metadata:
      labels:
        app: selfhealing-sentinel
        component: sentinel-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sentinel-sa
      containers:
      - name: sentinel-api
        image: selfhealing-sentinel/sentinel-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
          name: http
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: logs-volume
          mountPath: /app/logs
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config-volume
        configMap:
          name: sentinel-config
      - name: logs-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: sentinel-api
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: sentinel-api
spec:
  selector:
    app: selfhealing-sentinel
    component: sentinel-api
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: anomaly-detector
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: anomaly-detector
spec:
  selector:
    app: selfhealing-sentinel
    component: anomaly-detector
  ports:
  - port: 8000
    targetPort: 8000
    name: metrics
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: remediation-orchestrator
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: remediation-orchestrator
spec:
  selector:
    app: selfhealing-sentinel
    component: remediation-orchestrator
  ports:
  - port: 8001
    targetPort: 8001
    name: metrics
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sentinel-api-ingress
  namespace: sentinel
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  rules:
  - host: sentinel.example.com  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sentinel-api
            port:
              number: 80
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sentinel-model-trainer
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: model-trainer
spec:
  schedule: "0 0 * * *"  # Run daily at midnight
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: selfhealing-sentinel
            component: model-trainer
        spec:
          serviceAccountName: sentinel-sa
          containers:
          - name: model-trainer
            image: selfhealing-sentinel/model-trainer:latest
            imagePullPolicy: IfNotPresent
            resources:
              limits:
                cpu: "2"
                memory: "4Gi"
              requests:
                cpu: "500m"
                memory: "1Gi"
            volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: models-volume
              mountPath: /app/models
            - name: logs-volume
              mountPath: /app/logs
            env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: LOG_LEVEL
              value: "INFO"
            - name: TRAINING_DAYS
              value: "7"
          volumes:
          - name: config-volume
            configMap:
              name: sentinel-config
          - name: models-volume
            persistentVolumeClaim:
              claimName: sentinel-models-pvc
          - name: logs-volume
            emptyDir: {}
          restartPolicy: OnFailure
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sentinel-models-pvc
  namespace: sentinel
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard  # Adjust based on your cluster's storage classes
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: demo-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: selfhealing-sentinel
      component: demo-app
  template:
    metadata:
      labels:
        app: selfhealing-sentinel
        component: demo-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: demo-app
        image: selfhealing-sentinel/demo-app:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: FAILURE_PROBABILITY
          value: "0.1"  # 10% chance of simulated failures
        - name: FAILURE_DURATION
          value: "300"  # 5 minutes of failure duration
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app
  namespace: sentinel
  labels:
    app: selfhealing-sentinel
    component: demo-app
spec:
  selector:
    app: selfhealing-sentinel
    component: demo-app
  ports:
  - port: 80
    targetPort: 8080
    name: http
  type: ClusterIP