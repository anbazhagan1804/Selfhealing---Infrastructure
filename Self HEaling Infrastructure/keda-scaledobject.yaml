apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: sentinel-autoscaler
  namespace: self-healing-sentinel
spec:
  scaleTargetRef:
    name: sentinel-api
  minReplicaCount: 2
  maxReplicaCount: 10
  pollingInterval: 15
  cooldownPeriod: 300
  advanced:
    horizontalPodAutoscalerConfig:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 50
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 30
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: http_requests_per_second
      threshold: "50"
      query: sum(rate(http_requests_total{service="sentinel-api"}[2m]))
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: http_request_duration_seconds
      threshold: "0.5"
      query: histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{service="sentinel-api"}[2m])) by (le))
  - type: cpu
    metadata:
      type: Utilization
      value: "70"
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: anomaly-detector-scaler
  namespace: self-healing-sentinel
spec:
  scaleTargetRef:
    name: anomaly-detector
  minReplicaCount: 1
  maxReplicaCount: 5
  pollingInterval: 30
  cooldownPeriod: 300
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: metrics_to_process
      threshold: "1000"
      query: sum(sentinel_metrics_to_process)
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: processing_time
      threshold: "0.8"
      query: avg(sentinel_metric_processing_time_seconds)
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: remediation-orchestrator-scaler
  namespace: self-healing-sentinel
spec:
  scaleTargetRef:
    name: remediation-orchestrator
  minReplicaCount: 1
  maxReplicaCount: 3
  pollingInterval: 30
  cooldownPeriod: 300
  triggers:
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: pending_actions
      threshold: "5"
      query: sum(sentinel_remediation_actions_pending)
  - type: prometheus
    metadata:
      serverAddress: http://prometheus-service.monitoring.svc.cluster.local:9090
      metricName: active_incidents
      threshold: "10"
      query: sum(sentinel_active_incidents)
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: prometheus-trigger-auth
  namespace: self-healing-sentinel
spec:
  secretTargetRef:
  - parameter: bearerToken
    name: prometheus-auth
    key: token
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-auth
  namespace: self-healing-sentinel
type: Opaque
data:
  token: BASE64_ENCODED_TOKEN_HERE  # Replace with actual base64 encoded token